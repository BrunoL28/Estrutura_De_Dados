1) No código em questão, o problema está no fato de que a memória é alocada dinamicamente para intArray,
mas não ocorre sua liberação.

2) Executando valgrind para verificar o código incorreto

valgrind --leak-check=full ./c5.exe

==19014== HEAP SUMMARY:
==19014==     in use at exit: 4,000 bytes in 1 blocks
==19014==   total heap usage: 2 allocs, 1 frees, 5,024 bytes allocated   //2 allocs e 1 free
==19014== 
==19014== 4,000 bytes in 1 blocks are definitely lost in loss record 1 of 1
==19014==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==19014==    by 0x1091E7: main (c5.c:9)
==19014== 
==19014== LEAK SUMMARY:
==19014==    definitely lost: 4,000 bytes in 1 blocks
==19014==    indirectly lost: 0 bytes in 0 blocks
==19014==      possibly lost: 0 bytes in 0 blocks
==19014==    still reachable: 0 bytes in 0 blocks
==19014==         suppressed: 0 bytes in 0 blocks
==19014==
==19014== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

3) Para corrigir o código, basta fazer a liberação do espaço de memória que foi alocado para intArray.

4)Executando o valgrind após corrigir o código

valgrind --leak-check=full ./c5correto.exe 

==19691== HEAP SUMMARY:
==19691==     in use at exit: 0 bytes in 0 blocks
==19691==   total heap usage: 2 allocs, 2 frees, 5,024 bytes allocated
==19691== 
==19691== All heap blocks were freed -- no leaks are possible
==19691==
==19691== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
