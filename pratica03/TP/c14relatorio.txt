1) No código em questão, o erro está no fato da variável fat, que calcula o fatorial, ter sido declarada,
mas não inicializada. Isso, assim como em um problema anterior, pode causar comportamentos inesperados, e
em um contexto de cálculo preciso, retornar valores errados para os fatoriais.

2) Executando o Valgrind para confirmar que esse é o problema

valgrind --leak-check=full --track-origins=yes ./c14.exe 

Positive integer:5
==10694== Conditional jump or move depends on uninitialised value(s)
==10694==    at 0x48CA958: __vfprintf_internal (vfprintf-internal.c:1687)
==10694==    by 0x48B4D3E: printf (printf.c:33)
==10694==    by 0x109204: main (c14.c:12)
==10694==  Uninitialised value was created by a stack allocation
==10694==    at 0x109189: main (c14.c:3)
==10694== 
==10694== Use of uninitialised value of size 8
==10694==    at 0x48AE69B: _itoa_word (_itoa.c:179)
==10694==    by 0x48CA574: __vfprintf_internal (vfprintf-internal.c:1687)
==10694==    by 0x48B4D3E: printf (printf.c:33)
==10694==    by 0x109204: main (c14.c:12)
==10694==  Uninitialised value was created by a stack allocation
==10694==    at 0x109189: main (c14.c:3)
==10694== 
==10694== Conditional jump or move depends on uninitialised value(s)
==10694==    at 0x48AE6AD: _itoa_word (_itoa.c:179)
==10694==    by 0x48CA574: __vfprintf_internal (vfprintf-internal.c:1687)
==10694==    by 0x48B4D3E: printf (printf.c:33)
==10694==    by 0x109204: main (c14.c:12)
==10694==  Uninitialised value was created by a stack allocation
==10694==    at 0x109189: main (c14.c:3)
==10694== 
==10694== Conditional jump or move depends on uninitialised value(s)
==10694==    at 0x48CB228: __vfprintf_internal (vfprintf-internal.c:1687)
==10694==    by 0x48B4D3E: printf (printf.c:33)
==10694==    by 0x109204: main (c14.c:12)
==10694==  Uninitialised value was created by a stack allocation
==10694==    at 0x109189: main (c14.c:3)
==10694== 
==10694== Conditional jump or move depends on uninitialised value(s)
==10694==    at 0x48CA6EE: __vfprintf_internal (vfprintf-internal.c:1687)
==10694==    by 0x48B4D3E: printf (printf.c:33)
==10694==    by 0x109204: main (c14.c:12)
==10694==  Uninitialised value was created by a stack allocation
==10694==    at 0x109189: main (c14.c:3)
==10694== 
Factorial 5 = 3720
==10694== 
==10694== HEAP SUMMARY:
==10694==     in use at exit: 0 bytes in 0 blocks
==10694==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==10694== 
==10694== All heap blocks were freed -- no leaks are possible
==10694==
==10694== ERROR SUMMARY: 11 errors from 5 contexts (suppressed: 0 from 0)

Detalhe para o valor retornado para fatorial de 5, que é 120.

3) Para resolver esse problema, basta inicializar a variável fat com 1, já que é o caso trivial do fatorial.

4) Executando o Valgrind depois de executar as correções no código

valgrind --leak-check=full ./c14correto.exe 

Positive integer:5
Factorial 5 = 120
==10965== 
==10965== HEAP SUMMARY:
==10965==     in use at exit: 0 bytes in 0 blocks
==10965==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==10965== 
==10965== All heap blocks were freed -- no leaks are possible
==10965==
==10965== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)